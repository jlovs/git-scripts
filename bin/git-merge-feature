#!/bin/sh
SRC=$(cd "$(dirname "$0")"; pwd)
source "${SRC}/common/print.sh"
source "${SRC}/common/submodules.sh"

print_help()
{
	print_info "Merges <feature-branch> in root project and all submodules into <master-branch>."
	print_info "If <master-branch> is not given it defaults to current branch."
	print_info ""
	print_info "usage: git merge-feature <feature-branch>"
	print_info "   or: git merge-feature <feature-branch> [<master-branch>]"
}

merge()
{	
	print_info "Synchronize $feature with origin"
	git fetch
	git checkout $feature
	git pull --rebase
	
	print_info "Syncrhonize $master_branch with origin"
	git checkout $master_branch
	git pull --rebase
	
	print_info "Merge $feature into $master_branch"
	git merge --ff-only $feature
}

merge_submodules()
{
    get_submodules
	current_dir=$PWD
	for submodule in $submodules_in_project; do
		cd $submodule
		print_info "In submodule $submodule"
		merge
		print_info "Push $master_branch to origin"
		git push
		cd $current_dir
	done
}

push_master_and_remove_feature()
{
	print_info "Push"
	git push
	print_info "Remove feature"
	git remove-feature $feature
}

set_tabs

SHORT=h

number_of_commits=-1

# read the options
OPTS=$(getopt -s sh --options $SHORT --name "$0" -- "$@")

if [ $? != 0 ] ; then echo "Failed to parse options...exiting." >&2 ; exit 1 ; fi

eval set -- "$OPTS"

# extract options and their arguments into variables.
while true ; do
  case "$1" in
	-h )
      print_help
	  exit 0
      shift
      ;;
    -- )
	  feature=$2
	  master_branch=$3
	  if [ -z $feature ]
	  then
		print_warning "Feature branch must be provided"
		exit 1
	  fi
	  shift 2
	  if [ -z $master_branch ]
		then
			master_branch=$(git rev-parse --abbrev-ref HEAD)
			print_info "Assuming branch $master_branch as master-branch"
		else
			shift
		fi
      break
      ;;
    *)
      break
      ;;
  esac
done

merge &&
merge_submodules &&
push_master_and_remove_feature

