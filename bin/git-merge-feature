#!/bin/sh
SRC=$(cd "$(dirname "$0")"; pwd)
source "${SRC}/common/print.sh"
source "${SRC}/common/submodules.sh"

print_help()
{
	print_info "Merges <feature-branch> in root project and all submodules into <master-branch>."
	print_info ""
	print_info "usage: git merge-feature"
	print_info "   or: git merge-feature <feature-branch>"
	print_info "   or: git merge-feature <feature-branch> <master-branch>"
}

merge()
{	
	print_info "Synchronize $feature with origin"
	git fetch
	git checkout $feature
	git pull --rebase
	
	print_info "Syncrhonize $master_branch with origin"
	git checkout $master_branch
	git pull --rebase
	
	print_info "Merge $feature into $master_branch"
	git merge $feature
}

merge_submodules()
{
    get_submodules
	current_dir=$PWD
	for submodule in $submodules_in_project; do
		cd $submodule
		print_info "In submodule $submodule"
		merge
		print_info "Push $master_branch to origin"
		git push
		cd $current_dir
	done
}

push_master_and_remove_feature()
{
	print_info "Push"
	git push
	print_info "Remove feature"
	git remove-feature $feature
}

check_arguments()
{
	if [ "$options" == "-h" ]
	then 
		print_help
		exit 0
	fi

	if [ -z $master_branch ]
	then
		feature=$1
		master_branch=$2
		options=''
	fi
	
	if [ -z $master_branch ]
	then
		master_branch="master"
	fi
	
	if [ -z $feature ]
	then
		feature=$(git rev-parse --abbrev-ref HEAD)
	fi
}

options=$1
feature=$2
master_branch=$3

tabs 26

check_arguments "$1" "$2" "$3"

merge &&
merge_submodules &&
push_master_and_remove_feature

