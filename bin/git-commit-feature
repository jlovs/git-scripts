#!/bin/sh
SRC="$(cd $(dirname "$0"); pwd)"
source "${SRC}/common/print.sh"
source "${SRC}/common/submodules.sh"

print_help()
{
	print_info "Adds and commits all changes in root repository and all submodules."
	print_info "If -m is used, the <commit-message> will be prefixed with the current branch name."
	print_info "master: <commit-message>"
	print_info ""
	print_info "usage: git commit-feature [<options>]"
	print_info ""
	print_info "    -c, --commit-only	only commits staged changes"
	print_info "    -m, --message <message>"
	print_info "	commit message"
}

commit()
{
	if ! [ "$commit_only" = true ]
	then 
		print_info "Adding all changes" 
		git add . || : 
	fi
	 
	print_info "Committing all changes" 
	if [ "$use_message" = true ]
	then
		git commit -m "$branch: $message"
	else
		git commit
	fi
}

commit_submodules()
{
	get_submodules
	current_dir=$PWD
	for submodule in $submodules_in_project; do
		cd $submodule
		print_info "In submodule $submodule"
		commit
		cd $current_dir
	done
}

use_message=false

set_tabs

SHORT=chm:
LONG=commit-only,message:

# read the options
OPTS=$(getopt -s sh --options $SHORT --long $LONG --name "$0" -- "$@")

if [ $? != 0 ] ; then echo "Failed to parse options...exiting." >&2 ; exit 1 ; fi

eval set -- "$OPTS"

# extract options and their arguments into variables.
while true ; do
  case "$1" in
	-h )
      print_help
	  exit 0
      shift
      ;;
    -m | --message )
      message=$2
	  use_message=true
      shift 2
      ;;
	-c | --commit-only )
      commit_only=true
      shift 
      ;;
    -- )
	  shift
      ;;
    *)
      break
      ;;
  esac
done

if [ "$use_message" = true ] && [ -z "$message" ]
then
	print_warning "Message is required"
	exit 1
fi

branch=$(git rev-parse --abbrev-ref HEAD)

on_branch "root" &&
submodules_on_branch &&
commit_submodules &&
commit