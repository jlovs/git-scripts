#!/bin/sh
# git-squash-feature

SRC=$(cd "$(dirname "$0")"; pwd)
source "${SRC}/common/print.sh"
source "${SRC}/common/submodules.sh"
source "${SRC}/common/confirm.sh"

print_help()
{
	print_info "Squash all commits in feature branch into one commit for root repository and"
	print_info "submodules. Also squashes the commit messages automatically"
	print_info ""
	print_info "usage: git squash-feature [<options>] [<master-branch>]"
	print_info "usage: git squash-feature -n 3 -m \"Added some...\" master"
	print_info "" 
	print_info "    -m, --message <message>"
	print_info "	commit message"
	print_info "    -n, --number-of-commits <number>"
}

squash()
{
	if [ $number_of_commits == -1 ]
	then
		print_info "Get number of commits since branched"
		num=$(git rev-list --count HEAD ^$master_branch)
	else
		num=$number_of_commits
	fi
	
	if [ $num -lt 2 ]
	then
		print_warning "No commits to squash!"
	else
		print_info "Commits to squash: $num"
		
		if [ -z "$message" ]
		then
			print_info "Get commit messages since branched"
			commit_messages=$(git show -s --format=%B HEAD...HEAD~$num)
		else
			commit_messages="$message"
		fi
		
		print_info "Reset HEAD to origin/$master_branch"
		git reset --soft HEAD~$num
		print_info "Commit squashed commits"
		git commit -am "$branch: $commit_messages"
	fi
}

squash_submodules()
{
    get_submodules
	current_dir=$PWD
	for submodule in $submodules_in_project; do
		cd $submodule
		print_info "In submodule $submodule"
		squash
		cd $current_dir
	done
}

check_arguments()
{
	if [ -z $master_branch ]
	then
		print_info "Assuming branch master as <master-branch>"
		master_branch="master"
	fi
}

SHORT=m:n:h
LONG=message:,number-of-commits:

number_of_commits=-1

# read the options
OPTS=$(getopt -s sh --options $SHORT --long $LONG --name "$0" -- "$@")

if [ $? != 0 ] ; then echo "Failed to parse options...exiting." >&2 ; exit 1 ; fi

eval set -- "$OPTS"

# extract options and their arguments into variables.
while true ; do
  case "$1" in
	-h )
      print_help
	  exit 0
      shift
      ;;
    -m | --message )
      message="$2"
      shift
      ;;
    -n | --number-of-commits )
      number_of_commits="$2"
      shift 2
      ;;
    -- )
	  if [ -n $2 ]
	  then
		master_branch=$2
		shift
	  fi
      shift
      break
      ;;
    *)
      break
      ;;
  esac
done

set_tabs

check_arguments

branch=$(git rev-parse --abbrev-ref HEAD)

print_info "Squash root repository $branch commits" &&
squash &&
squash_submodules && 
print_info "Amend submodule revision changes to last commit in root repository" &&
git commit -a --amend --no-edit
