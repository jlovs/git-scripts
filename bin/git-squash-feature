#!/bin/sh
# git-squash-feature

SRC=$(cd "$(dirname "$0")"; pwd)
source "${SRC}/common/print.sh"
source "${SRC}/common/submodules.sh"
source "${SRC}/common/confirm.sh"

print_help()
{
	print_info "Squash all commits in feature branch into one commit for root repository and"
	print_info "submodules. Also squashes the commit messages automatically"
	print_info ""
	print_info "usage: git squash-feature [<options>] [<master-branch>]"
	print_info "" 
	print_info "    -m, --message <message>"
	print_info "	commit message"
}

squash()
{
	print_info "Get number of commits since branched"
	local num=$(git rev-list --count HEAD ^$master_branch)
	if [ $num -lt 2 ]
	then
		print_warning "No commits to squash!"
	else
		print_info "Commits to squash: $num"
		
		if [ -z "$message" ]
		then
			print_info "Get commit messages since branched"
			commit_messages=$(git show -s --format=%B HEAD...HEAD~$num)
		else
			commit_messages="$message"
		fi
		
		print_info "Reset HEAD to origin/$master_branch"
		git reset --soft HEAD~$num
		print_info "Commit squashed commits"
		git commit -am "$branch: $commit_messages"
	fi
}

squash_submodules()
{
    get_submodules
	current_dir=$PWD
	for submodule in $submodules_in_project; do
		cd $submodule
		print_info "In submodule $submodule"
		squash
		cd $current_dir
	done
}

check_arguments()
{
	if [ "$options" == "-h" ]
	then 
		print_help
		exit 0
	fi

	if [ "$options" == "-m" ] || [ "$options" == "--message" ]
	then
		message=$2
		master_branch=$3
	else
		master_branch=$1
	fi

	if [ -z $master_branch ]
	then
		print_info "Assuming branch master as <master-branch>"
		master_branch="master"
	fi
}

options=$1

set_tabs

check_arguments "$1" "$2" "$3"

branch=$(git rev-parse --abbrev-ref HEAD)

print_info "Squash root repository $branch commits" &&
squash &&
squash_submodules && 
print_info "Amend submodule revision changes to last commit in root repository" &&
git commit -a --amend --no-edit
