#!/bin/sh

SRC=$(cd $(dirname "$0"); pwd)
source "${SRC}/common/print.sh"

branch=$2
options=$1

test -z $branch && test -z $options && print "${RED}feature-name is required" && exit 1

if [ $options = "-h" ]
then 
    print "Create branch in parent project and all submodules based on the latest in master branches. Checks out the new branch and pushes it to the remote." &&
	print "" &&
	print "Usage: git create-feature [<options>] <feature-name>" &&
	print "" &&
    print "Options:" && 
	print "-h    Brings up this help" &&
    print "-q    Runs in quite mode" &&	exit 0
fi

if [ -z $branch ]
then
	branch=$1
	options=''
fi

print "Checking out master in parent project" &&
git checkout master $options --recurse-submodules &&
print "Checking out master in all submodules" &&
git submodule foreach $options git checkout $options master &&
print "Cleaning parent project" &&
git clean $options -xdff &&
print "Cleaning all submodules" &&
git submodule foreach $options git clean $options -xdff &&
print "Synchronizing parent project with latest master from origin" &&
git pull $options --rebase --recurse-submodules &&
print "Synchronizing all submodules with latest master from origin" &&
git submodule $options foreach git pull $options --rebase &&
print "Createing branch $branch based on master for all submodules" &&
git submodule $options foreach git checkout $options -b $branch &&
print "Pushing branch $branch for all submodules to remote" &&
git submodule $options foreach git push $options -u origin $branch &&
print "Creating branch $branch based on master for parent project" &&
git checkout $options -b $branch &&
print "Pushing branch $branch to remote" &&
git push $options -u origin $branch