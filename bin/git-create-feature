#!/bin/sh
# git create-feature
SRC=$(cd $(dirname "$0"); pwd)
source "${SRC}/common/print.sh"

branch=$2
options=$1


if [ $options = "-h" ]
then 
    print "Create branch in parent project and all submodules based on the latest in master branches. Checks out the new branch and pushes it to the remote." &&
	print "" &&
	print "Usage: git create-feature [<options>] <feature-name>" &&
	print "" &&
    print "Options:" && 
	print "-h    Brings up this help" &&
    print "-q    Runs in quite mode" &&	exit 0
fi

if [ -z $branch ]
then
	branch=$1
	options=''
fi

test -z $branch && warn "feature-name is required" && exit 1

create_feature()
{
	print "Checking out master" &&
	git checkout master &&
	print "Fetching changes" &&
	git fetch &&
	print "Clean" &&
	git clean -xdff &&
	print "Create branch $branch" &&
	git checkout -b $branch &&
    print "Push branch to remote" &&
	git push -u origin $branch &&
	print "Rebase on top of remote changes" &&
	git rebase origin/master
}

create_feature_submodules()
{
	submodules=$(git submodule | awk  '{print $2}')
	current_dir=$PWD
	for submodule in $submodules; do
		cd $submodule
		print "In submodule $submodule"
		create_feature
		cd $current_dir
	done
}

create_feature &&
create_feature_submodules &&
git status
