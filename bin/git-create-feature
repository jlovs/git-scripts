#!/bin/sh

SRC=$(cd "$(dirname "$0")"; pwd)
source "${SRC}/common/print.sh"
source "${SRC}/common/submodules.sh"
source "${SRC}/common/confirm.sh"
source "${SRC}/common/common.sh"

print_help()
{
	print_info "Creates a branch in root repository and all submodules based"
	print_info "the <master-branch> branch. Checks out the new branch and"
	print_info "pushes it to the remote. All local changes is stashed/popped"
	print_info "before/after creation."
	print_info "" 
	print_info "usage: git create-feature <feature-name> [<master-branch>]"
}

create_feature()
{
	print_info "In $1"
	changes="$(git status --porcelain)"
	if ! [ -z  "$changes"]
	then
		print_info "Stashing changes"
		git stash push
	fi
	print_info "Pull changes from remote"
	git pull --rebase
	print_info "Create branch $feature_name"
	git checkout -b $feature_name
    print_info "Push branch to remote"
	git push -u origin $feature_name
	
	if [ ! -z "$changes"]
	then
		print_info "Popping changes"
		git stash pop
	fi
}

create_feature_submodules()
{
	get_submodules
	current_dir=$PWD
	for submodule in $submodules_in_project; do
		cd $submodule
		create_feature $submodule
		cd $current_dir
	done
}

set_tabs

SHORT=h

# read the options
OPTS=$(getopt -s sh --options $SHORT --name "$0" -- "$@")

if [ $? != 0 ] ; then echo "Failed to parse options...exiting." >&2 ; exit 1 ; fi

eval set -- "$OPTS"

# extract options and their arguments into variables.
while true ; do
  case "$1" in
	-h )
      print_help
	  exit 0
      shift
      ;;
    -- )
	  feature_name=$2
	  master_branch=$3
	  if [ -z $feature_name ]
	  then
		print_warning "<feature-name> must be provided"
		exit 1
	  fi
	  shift 2
	  if [ -z $master_branch ] 
	  then
		master_branch="master"
		print_info "Assuming <master-branch> as 'master'"
	  else
		shift
	  fi
      break
      ;;
    *)
      break
      ;;
  esac
done

print_info "Checking out $master_branch"
git checkout-branch $master_branch

create_feature "root" &&
create_feature_submodules
