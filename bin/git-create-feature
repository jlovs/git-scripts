#!/bin/sh

SRC=$(cd "$(dirname "$0")"; pwd)
source "${SRC}/common/print.sh"
source "${SRC}/common/submodules.sh"
source "${SRC}/common/confirm.sh"
source "${SRC}/common/common.sh"

print_help()
{
	print_info "Creates a branch in root repository and all submodules based on the"
	print_info "<master-branch> branch."
	print_info "Checks out the new branch and pushes it to the remote. All local changes will remain."
	print_info "" 
	print_info "usage: git create-feature <feature-name> [<master-branch>]"
}

create_feature()
{
	changes="$(git status --porcelain)"
	if [ ! -z  "$changes"]
	then
		print_info "Stashing changes"
		git stash push
	fi
	print_info "Pull changes from remote"
	git pull --rebase
	print_info "Create branch $branch"
	git checkout -b $branch
    print_info "Push branch to remote"
	git push -u origin $branch
	
	if [ ! -z "$changes"]
	then
		print_info "Popping changes"
		git stash pop
	fi
}

create_feature_submodules()
{
	get_submodules
	current_dir=$PWD
	for submodule in $submodules_in_project; do
		cd $submodule
		print_info "In submodule $submodule"
		create_feature
		cd $current_dir
	done
}

check_arguments()
{
	if [ -z $options ]
	then
		print_error "Wrong arguments given!"
		print_help
		exit 0
	fi

	if [ "$options" == "-h" ]
	then 
		print_help && exit 0
	fi

	if [ -z $master_branch ]
	then
		master_branch=$2
		branch=$1
		options=''
	fi

	if [ -z $master_branch ]
	then
		print_info "Assuming branch master as <master-branch>"
		master_branch="master"
	fi

	if [ -z $branch ]
	then
		print_error "<feature-name> is required"
		print_help
		exit 1
	fi
}

options=$1
branch=$2
master_branch=$3

set_tabs

check_arguments "$1" "$2" "$3"

print_info "Checking out $master_branch"
git checkout-branch $master_branch

create_feature &&
create_feature_submodules
